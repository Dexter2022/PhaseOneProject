Typecasting
----------------------------------------
package com.simplilearn.typecasting;

public class TypeCastingDemo {

	public static void main(String[] args) {
		
		char a='A';
		System.out.println("char Value "+a);
		int b=a; //implicit type casting
		System.out.println("Int Value "+b);
		float c= b;
		System.out.println("Float Value "+c);
		double d=c;
		System.out.println("Double Value "+d);
		
		byte x= (byte) b; //explicitly you have to convert 
		System.out.println("Byte value "+x);
		
		double y= 34.6789;
		int z=(int) y;
		System.out.println("Double "+y+ "converted to int "+z);
		//loss of data while converting value from double to int
	}
}
__________________________________________________________________________________________
What is Object?

Object is a instance of class

we can create object using new keyword

classname objname= new classname(); //syntax

when we create an object, object can access properties and methods of class (but as per permission provided)
______________________________________________________________________________________

AccessSpecifier

specifies the access of variable/ class /method or constructor

we will use for variable to get clarity
---------------------------------------------------------------------
private accessible only within a same class

public accessible to everywhere (world)

default accessible only with a same package

protected accessible in class, same package, child class (sub class)

example
_____________________________________________________________________________
create a class in com.simplilearn.typecasting package

package com.simplilearn.typecasting;

//Same Class
public class AccessSpecifier {

	int a=40; //default
	
	public int b=30; // public
	
	private int c=40; // private
	
	protected int d=50; //protected
	
	public static void main(String[] args) {
		
		AccessSpecifier obj= new AccessSpecifier(); //object creation systanx
		
		System.out.println("get default "+obj.a);
		System.out.println("Get Public: "+obj.b);
		System.out.println("Get Private: "+obj.c);
		System.out.println("Get Protected: "+obj.d);
		
		/*In same class
			all public,private, default, protected accessible
		*/
	}
}


create another class in Same package
-------------------------------------------------
package com.simplilearn.typecasting;

public class ClassInSamePackage {

	public static void main(String[] args) {

		AccessSpecifier obj = new AccessSpecifier(); // object creation systanx

		System.out.println("get default " + obj.a);
		System.out.println("Get Public: " + obj.b);
		System.out.println("Get Private: " + obj.c);
		System.out.println("Get Protected: "+obj.d);
		/*
		 *  In same package default,protected and public accessible
		 *  but private you can not access
		 * */
	}
}
__________________________________________________________________________________________

create one more class in com.simplilearn.accessspecifier package (diffrent package)

package com.simplilearn.accessspecifier;

import com.simplilearn.typecasting.AccessSpecifier;

public class InAnotherPackage {

	public static void main(String[] args) {

		AccessSpecifier obj = new AccessSpecifier(); // object creation systanx

		System.out.println("get default " + obj.a);
		System.out.println("Get Public: " + obj.b);
		System.out.println("Get Private: " + obj.c);
		System.out.println("Get Protected: "+obj.d);
		
		/*
		 *  In different public only accessible
		 *  but private,protected, default you can not access
		 * */
	}
}

_____________________________________________________________________________________________
Observe the errors and understand the requirements

*********************************************************************************
default value of diffrent datatypes

package com.simplilearn.accessspecifier;

public class DefaultValue {

	int a;
	String b;
	long d;
	
	public static void main(String[] args) {
		
		DefaultValue obj= new DefaultValue();
		
		System.out.println(obj.d);
	}
}

//declare variable with different types and print and check

*****************************************************************************************
Task 1: Write a program to create an Arithmetic Calculator
----------------------------------------------------------------
which will do the simple arithmetic operations

Addition Subtraction multiplication and division

	Step1: ask user to enter number, num1 and num2
	Step2: ask user to enter 1 for addition, 2 for Sub, 3 for mul and 4 for Div
		Hint: if(op==1)
			{
				result= num1+num2;
			}

	Step3: check the condition and according to that perform the operations
	Step4: Print Result

_________________________________________________________________________________
if you want to get any value from User then Use Scanner
Scanner class which is provided by JAVA.util package import it and use it.

package com.simplilearn.accessspecifier;

import java.util.Scanner;

public class SimpleScannerUse {

	public static void main(String[] args) {
		
		int num;
		//create object ob scanner class to use it
		Scanner sc= new Scanner(System.in);
		System.out.println("Enter Any number");
		//store it in num variable the value which is entered by user
		num= sc.nextInt();
		
		System.out.println("Number entered by you is "+num);
	}
}

_________________________________________________________________________________________ 

Method (function)

method is simply --> collection statements which is created to complete a certain task

--> using method we can  separate our logics

--> we reuse the same logic multiple times

how to write method?

returnType methodName(list of parameters)
{
	//write your code
}

return type? means what your method will return? 

method can return nothing: void
method can return number: int, float, double, byte
method can return condition: boolean
method can return character: char
method can return message: String

etc..............

methodName: name can be anything
	    must start with lowercase but if you have more words then another word first letter should be caps.
	    example: printFirstName()

() -- can be empty if your don't want to pass anything 
(int a) -- one parameter which is int
(int a,int b) -- 2 parameters which is int

you can give parameter according to your requirement( choose datatype and name)

*****************************************************************************************
package com.simplilearn.method;

public class MethodDemo {

	//simple method without parameter
	public void print() {
		System.out.println("this is my simple method");
	}
	//simple method with parameter
	public void greeting(String name) {
		System.out.println("Welcome "+name);
	}
	//method which will return int and with 2 parameter
	public int addition(int num1,int num2) {
		return num1+num2;
	}
	
	//let's use this methods
	//call them in main methods
	public static void main(String[] args) {
		
		MethodDemo obj= new MethodDemo(); //created object my class to use its method
		obj.print();
		obj.greeting("Sonam Soni"); //passing parameter in name variable
		int sum=obj.addition(23, 3); //passing one value in name1 and another value in name2
		System.out.println("Result is "+sum);
		
	}
}

_____________________________________________________________________________________________________

What is the use of static method?

static method we can call directly without creating an object of a class

we just need to give Classname.methodname

-----------------------------------------------------------------------------------
package com.simplilearn.method;

public class StaticMethod {

	public static void test() {
		System.out.println("This is my test method ");
	}
	
	public static void main(String[] args) {
		
		StaticMethod.test();
		//calling static method directly with classname.methodname
		//no need to create an object
		//Memory management
	}
}
_______________________________________________________________________________________________

1. Write a program to create a method for finding a square and cube of a number.
2. Write a program and create method to find out area and perimeter of Rectangle.
3. Write a program and create method to print first 100 odd number.

_______________________________________________________________________________________________
Constructors
-------------------------------
These are the special methods provide by JAVA

--Constructor name is same as class name
--use: to initialise a variable
--Constructor doesn't have any return type
--no need to call explicitly, when you create object of your class it will call automatically
--we can create multiple constructor with different parameter
--If we will not create any constructor then compiler will provide default constructor to JVM.

Simple Constructor to initialise a value
----------------------------------------------
package com.simplilearn.method;

public class Student {

	int rollNo;
	String name;
	
	Student(){
		rollNo=1;
		name="Dummy";
	}
	
	public void display() {
		System.out.println(rollNo +" "+name);
	}
	
	public static void main(String[] args) {
		
		Student s1= new Student(); //this will call constructor
		s1.display();
	}
}
_____________________________________________________________________________________


More example of Constructor
--------------------------------
package com.simplilearn.method;

public class Student {

	int rollNo;
	String name;
	
	//default constructor
	public Student() {
		rollNo=0;
		name=null;
	}
	public Student(int r, String n){
		rollNo=r;
		name=n;
	}
	
	public void display() {
		System.out.println(rollNo +" "+name);
	}
	
	public static void main(String[] args) {
		
		Student s1= new Student(1,"Sonam"); 
		s1.display();
		Student s2= new Student(2,"Hiba"); 
		s2.display();
		Student s3= new Student(3,"Raghav"); 
		s3.display();
		Student s4= new Student();
		s4.display();
	}
}
______________________________________________________________________________________________

4. Write program to create a class Employee where employee has empCode(int), empName(String),
empEmail(String) 
		create constructor to initialise this values
		create one display method to display it
	
		create 3 objects from main method and pass parameters in your constructor
		call display method to print employee

		









